c
object_arr["type"] === "contact"
n
object_arr
c
object_arr
c
object_arr
c
object_arr
c
object_arr
c
@@random_password
c
n
@email
n
mail_hash
n
c
mail_hash[:email]
mail_hash["email"]
mail_hash["password"]
mail_hash[:password]
mail_hash
n
object_arr["type"].blank?
object_arr["type"]
object_arr
c
object_arr[:email]
object_arr["email"]
object_arr["type"]
object_arr[:type]
object_arr[:type] === "acknowledge"
object_arr[:type].blank?
n
object_arr
c
n
object_arr
c
self
password
n
@@random_password
c
object_arr
c
C
c
env['CONTENT_TYPE'].match(/application\/json/).blank?
n
c
env['CONTENT_TYPE'].match(/application\/json/).blank?
env['CONTENT_TYPE'].match(/application\/jsodddsdn/).blank?
env['CONTENT_TYPE'].match(/application\/json/).nil?
env['CONTENT_TYPE'].match(/application\/json/).blank?
env['CONTENT_TYPE'].match(/application\/json/)
env['CONTENT_TYPE'] =~ /application\/json/
env['CONTENT_TYPE']
env
env['HTTP_ACCEPT']
error
n
c
env['HTTP_ACCEPT'] =~ /application\/json/
error
n
c
n
c
@app.call(env)
@app.call
@app
env
c
n
c
n
c
!contact_params.present?  || ( contact_params.present? && (  !contact_params[:name].present?  || !contact_params[:email].present? ||  !contact_params[:phone].present? ||  !contact_params[:description].present?))
    9: return render_message({responseCode: PARTIAL_CONTENT,responseMessage: PARTIAL_CONTENT_MESSAGE})
!contact_params.present?  || ( contact_params.present? && (  !contact_params[:name].present?  || !contact_params[:email].present? ||  !contact_params[:phone].present? ||  !contact_params[:description].present?))
contact_params.present?
params
c
params
c
params
contact_params.present?
!contact_params.present?
c
request.response_body
request.@_response_body
request.body.inspect
request.body
request
params.empty?
params
c
contact_params.present?
contact_params
params
N
C
EXIT
C
request.headers[:AUTHORIZATION]
request.headers[:HTTP_AUTHORIZATION]
request.headers
c
hash
c
hash
c
n
user_params.present?   && (!user_params[:email].present? || !user_params[:password].present? || !user_params[:password_confirmation].present?)
c
n
user_params.present?   && (!user_params[:email].present? || !user_params[:password].present? || !user_params[:password_confirmation].present?)
(!user_params[:email].present? || !user_params[:password].present? || !user_params[:password_confirmation].present?)
user_params[:password_confirmation].present?
user_params[:password].present?
user_params[:email].present?
user_params.present?  
 if user_params.present?   && (!user_params[:email].present? || !user_params[:password].present? || !user_params[:password_confirmation].present?)
c
 user_params.present?   && (!user_params[:email].present? || !user_params[:password].present? || !user_params[:password_confirmation].present?)
user_params
c
params[:user_params]
c
user_params
user_params'
user_params[:email]
user_params
params
c
user_params
params
c
n
file.each do |p|
file.path
file
c
row
n
CSV.foreach(file.path, {:encoding => 'utf-8', headers: true, skip_blanks: true}) do |row|
c
status
n
status
c
status
row.headers
row.headers.blank?
c
row.headers.reverse === header_arr
c
row.headers.reverse === header_arr
row.headers
c
row.headers
row.headers.reverse === header_arr
c
row.headers!=["title", "photo"]
c
~c
c
row.headers
c
n
CSV.open(file, skip_blanks: true).reject { |row| row.all?(&:nil?) }
CSV.open(import_file, skip_blanks: true).reject { |row| row.all?(&:nil?) }
row.headers==["title","photo"]
row.headers
c
row.headers.includes? ["title", "photo"]
row.headers.equals?["title", "photo"]
row.headers
row.header
row
row.headers.equals?["title", "photo"]
row.headers == ["title", "photo"]
row.headers == ["title"]
row.headers == []
row.headers.none?{|p| p p}
row.headers
row.headers.include?["image"]
row.headers
row.headers.none?{|e| e =~ /image/i}
row.headers.none?{|e| e =~ /email/i}
file.headers
file
row["title"]
row["photo"]
row["image"]
row["image"}
row
file.path
row
c
$redis.get("error_count")
$redis.get("success_count")
n
$redis.get("success_count")
$redis.get("error_count")
c
n
$redis.get("error_count")
$redis.get("success_count")
n
$redis.get("success_count")
n
$redis.get("success_count")
n
c
n
$redis.get("success_count")
n
$redis.get("success_count")
$redis.get("success_count)
c
$redis.get("success_count")
$redis.get("error_count")
n
$redis.get("success_count")
c
n
object_arr
c
n
